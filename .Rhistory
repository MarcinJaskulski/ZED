ggplot(mapping=aes(alpha=0.4)) +
geom_density(aes(price, fill="training"), d1) +
geom_density(aes(price, fill="testing"), d2) +
theme_minimal()
reggresion_df <- df[-1]
inTraining  <- createDataPartition(reggresion_df$Gold_Price_USD, p=0.7, list=F)
training <- reggresion_df[ inTraining,]
testing  <- reggresion_df[-inTraining,]
d1 <- data.frame(price=reggresion_df[inTraining,]$Gold_Price_USD)
d2 <- data.frame(price=reggresion_df[-inTraining,]$Gold_Price_USD)
ggplot(mapping=aes(alpha=0.4)) +
geom_density(aes(price, fill="training"), d1) +
geom_density(aes(price, fill="testing"), d2) +
theme_minimal()
reggresion_df <- df[-1]
inTraining  <- createDataPartition(reggresion_df$Gold_Price_USD, p=0.7, list=F)
training <- reggresion_df[ inTraining,]
testing  <- reggresion_df[-inTraining,]
d1 <- data.frame(price=reggresion_df[inTraining,]$Gold_Price_USD)
d2 <- data.frame(price=reggresion_df[-inTraining,]$Gold_Price_USD)
ggplot(mapping=aes(alpha=0.4)) +
geom_density(aes(price, fill="training"), d1) +
geom_density(aes(price, fill="testing"), d2) +
theme_minimal()
set.seed(23)
ctrl <- trainControl(
# powtórzona ocena krzyżowa
method = "repeatedcv",
# liczba podziałów
number = 2,
# liczba powtórzeń
repeats = 5)
fit <- train(training$Gold_Price_USD ~ .,
data = training,
method = "rf",
trControl = ctrl,
# Paramter dla algorytmu uczącego
ntree = 10)
library(mlbench)
data(Sonar)
kable(summary(Sonar))
reggresion_df <- df[-1]
inTraining  <- createDataPartition( y = reggresion_df$Gold_Price_USD, p=0.7, list=F)
training <- reggresion_df[ inTraining,]
testing  <- reggresion_df[-inTraining,]
d1 <- data.frame(price=reggresion_df[inTraining,]$Gold_Price_USD)
d2 <- data.frame(price=reggresion_df[-inTraining,]$Gold_Price_USD)
ggplot(mapping=aes(alpha=0.4)) +
geom_density(aes(price, fill="training"), d1) +
geom_density(aes(price, fill="testing"), d2) +
theme_minimal()
reggresion_df <- df[-1]
inTraining  <- createDataPartition( y = reggresion_df$Gold_Price_USD, p=0.7, list=F)
training <- reggresion_df[ inTraining,]
testing  <- reggresion_df[-inTraining,]
d1 <- data.frame(price=reggresion_df[inTraining,]$Gold_Price_USD)
d2 <- data.frame(price=reggresion_df[-inTraining,]$Gold_Price_USD)
ggplot(mapping=aes(alpha=0.4)) +
geom_density(aes(price, fill="training"), d1) +
geom_density(aes(price, fill="testing"), d2) +
theme_minimal()
reggresion_df <- df[-1]
inTraining  <- createDataPartition( y = reggresion_df$Gold_Price_USD, p=0.7, list=F)
training <- reggresion_df[ inTraining,]
testing  <- reggresion_df[-inTraining,]
d1 <- data.frame(price=reggresion_df[inTraining,]$Gold_Price_USD)
d2 <- data.frame(price=reggresion_df[-inTraining,]$Gold_Price_USD)
ggplot(mapping=aes(alpha=0.4)) +
geom_density(aes(price, fill="training"), d1) +
geom_density(aes(price, fill="testing"), d2) +
theme_minimal()
reggresion_df <- df[-1]
inTraining  <- createDataPartition( y = reggresion_df$Gold_Price_USD, p=0.7, list=F)
training <- reggresion_df[ inTraining,]
testing  <- reggresion_df[-inTraining,]
d1 <- data.frame(price=reggresion_df[inTraining,]$Gold_Price_USD)
d2 <- data.frame(price=reggresion_df[-inTraining,]$Gold_Price_USD)
ggplot(mapping=aes(alpha=0.4)) +
geom_density(aes(price, fill="training"), d1) +
geom_density(aes(price, fill="testing"), d2) +
theme_minimal()
reggresion_df <- df[-1]
inTraining  <- createDataPartition( y = reggresion_df$Gold_Price_USD, p=0.7, list=F)
training <- reggresion_df[ inTraining,]
testing  <- reggresion_df[-inTraining,]
d1 <- data.frame(price=reggresion_df[inTraining,]$Gold_Price_USD)
d2 <- data.frame(price=reggresion_df[-inTraining,]$Gold_Price_USD)
ggplot(mapping=aes(alpha=0.4)) +
geom_density(aes(price, fill="training"), d1) +
geom_density(aes(price, fill="testing"), d2) +
theme_minimal()
reggresion_df <- df[-1]
inTraining  <- createDataPartition( y = reggresion_df$Gold_Price_USD, p=0.7, list=F)
training <- reggresion_df[ inTraining,]
testing  <- reggresion_df[-inTraining,]
d1 <- data.frame(price=reggresion_df[inTraining,]$Gold_Price_USD)
d2 <- data.frame(price=reggresion_df[-inTraining,]$Gold_Price_USD)
ggplot(mapping=aes(alpha=0.4)) +
geom_density(aes(price, fill="training"), d1) +
geom_density(aes(price, fill="testing"), d2) +
theme_minimal()
reggresion_df <- df[-1]
inTraining  <- createDataPartition( y = reggresion_df$Gold_Price_USD, p=0.7, list=F)
training <- reggresion_df[ inTraining,]
testing  <- reggresion_df[-inTraining,]
d1 <- data.frame(price=reggresion_df[inTraining,]$Gold_Price_USD)
d2 <- data.frame(price=reggresion_df[-inTraining,]$Gold_Price_USD)
ggplot(mapping=aes(alpha=0.4)) +
geom_density(aes(price, fill="training"), d1) +
geom_density(aes(price, fill="testing"), d2) +
theme_minimal()
reggresion_df <- df[-1]
inTraining  <- createDataPartition( y = reggresion_df$Gold_Price_USD, p=0.7, list=F)
training <- reggresion_df[ inTraining,]
testing  <- reggresion_df[-inTraining,]
d1 <- data.frame(price=reggresion_df[inTraining,]$Gold_Price_USD)
d2 <- data.frame(price=reggresion_df[-inTraining,]$Gold_Price_USD)
ggplot(mapping=aes(alpha=0.4)) +
geom_density(aes(price, fill="training"), d1) +
geom_density(aes(price, fill="testing"), d2) +
theme_minimal()
reggresion_df <- df[-1]
inTraining  <- createDataPartition( y = reggresion_df$Gold_Price_USD, p=0.7, list=F)
training <- reggresion_df[ inTraining,]
testing  <- reggresion_df[-inTraining,]
d1 <- data.frame(price=reggresion_df[inTraining,]$Gold_Price_USD)
d2 <- data.frame(price=reggresion_df[-inTraining,]$Gold_Price_USD)
ggplot(mapping=aes(alpha=0.4)) +
geom_density(aes(price, fill="training"), d1) +
geom_density(aes(price, fill="testing"), d2) +
theme_minimal()
reggresion_df <- df[-1]
inTraining  <- createDataPartition( y = reggresion_df$Gold_Price_USD, p=0.7, list=F)
training <- reggresion_df[ inTraining,]
testing  <- reggresion_df[-inTraining,]
d1 <- data.frame(price=reggresion_df[inTraining,]$Gold_Price_USD)
d2 <- data.frame(price=reggresion_df[-inTraining,]$Gold_Price_USD)
ggplot(mapping=aes(alpha=0.4)) +
geom_density(aes(price, fill="training"), d1) +
geom_density(aes(price, fill="testing"), d2) +
theme_minimal()
reggresion_df <- df[-1]
inTraining  <- createDataPartition( y = reggresion_df$Gold_Price_USD, p=0.7, list=F)
training <- reggresion_df[ inTraining,]
testing  <- reggresion_df[-inTraining,]
d1 <- data.frame(price=reggresion_df[inTraining,]$Gold_Price_USD)
d2 <- data.frame(price=reggresion_df[-inTraining,]$Gold_Price_USD)
ggplot(mapping=aes(alpha=0.4)) +
geom_density(aes(price, fill="training"), d1) +
geom_density(aes(price, fill="testing"), d2) +
theme_minimal()
reggresion_df <- df[-1]
inTraining  <- createDataPartition( y = reggresion_df$Gold_Price_USD, p=0.7, list=F)
training <- reggresion_df[ inTraining,]
testing  <- reggresion_df[-inTraining,]
d1 <- data.frame(price=reggresion_df[inTraining,]$Gold_Price_USD)
d2 <- data.frame(price=reggresion_df[-inTraining,]$Gold_Price_USD)
ggplot(mapping=aes(alpha=0.4)) +
geom_density(aes(price, fill="training"), d1) +
geom_density(aes(price, fill="testing"), d2) +
theme_minimal()
set.seed(23)
ctrl <- trainControl(
# powtórzona ocena krzyżowa
method = "repeatedcv",
# liczba podziałów
number = 2,
# liczba powtórzeń
repeats = 5)
fit <- train(Gold_Price_USD ~ .,
data = training,
method = "rf",
trControl = ctrl,
# Paramter dla algorytmu uczącego
ntree = 10)
fit
rfClasses <- predict(fit, newdata = testing)
confusionMatrix(data = rfClasses, testing$Class)
rfClasses <- predict(fit, newdata = testing)
confusionMatrix(data = rfClasses, testing$Gold_Price_USD)
rfClasses <- predict(fit, newdata = testing)
confusionMatrix(data = rfClasses, testing$Gold_Price_USD)
View(rfClasses)
View(testing)
View(testing)
View(rfClasses)
set.seed(23)
ctrl <- trainControl(
# powtórzona ocena krzyżowa
method = "repeatedcv",
# liczba podziałów
number = 2,
# liczba powtórzeń
repeats = 5)
fit <- train(Gold_Price_USD ~ .,
data = training,
method = "rf",
trControl = ctrl,
# Paramter dla algorytmu uczącego
ntree = 10)
fit
rfClasses <- predict(fit, newdata = testing)
confusionMatrix(data = rfClasses, testing$Gold_Price_USD)
rfClasses <- predict(fit, newdata = testing)
confusionMatrix(rfClasses, testing$Gold_Price_USD)
set.seed(23)
inTraining <-
createDataPartition(
# atrybut do stratyfikacji
y = Sonar$Class,
# procent w zbiorze uczącym
p = .75,
# chcemy indeksy a nie listę
list = FALSE)
training <- Sonar[ inTraining,]
testing  <- Sonar[-inTraining,]
ctrl <- trainControl(
# powtórzona ocena krzyżowa
method = "repeatedcv",
# liczba podziałów
number = 2,
# liczba powtórzeń
repeats = 5)
set.seed(23)
fit <- train(Class ~ .,
data = training,
method = "rf",
trControl = ctrl,
# Paramter dla algorytmu uczącego
ntree = 10)
rfClasses <- predict(fit, newdata = testing)
confusionMatrix(data = rfClasses, testing$Class)
View(rfClasses)
set.seed(23)
ctrl <- trainControl(
# powtórzona ocena krzyżowa
method = "repeatedcv",
# liczba podziałów
number = 2,
# liczba powtórzeń
repeats = 5)
fit <- train(Gold_Price_USD ~ .,
data = training,
method = "rf",
# Paramter dla algorytmu uczącego
ntree = 30)
reggresion_df <- df[-1]
inTraining  <- createDataPartition( y = reggresion_df$Gold_Price_USD, p=0.7, list=F)
training <- reggresion_df[ inTraining,]
testing  <- reggresion_df[-inTraining,]
d1 <- data.frame(price=reggresion_df[inTraining,]$Gold_Price_USD)
d2 <- data.frame(price=reggresion_df[-inTraining,]$Gold_Price_USD)
ggplot(mapping=aes(alpha=0.4)) +
geom_density(aes(price, fill="training"), d1) +
geom_density(aes(price, fill="testing"), d2) +
theme_minimal()
set.seed(23)
ctrl <- trainControl(
# powtórzona ocena krzyżowa
method = "repeatedcv",
# liczba podziałów
number = 2,
# liczba powtórzeń
repeats = 5)
fit <- train(Gold_Price_USD ~ .,
data = training,
method = "rf",
# Paramter dla algorytmu uczącego
ntree = 30)
fit
rfClasses <- predict(fit, newdata = testing)
confusionMatrix(data = rfClasses, testing$Gold_Price_USD)
rrfFit <- train(drugscore ~ .,
data = training,
method = 'ranger',
# should be set high at least p/3
tuneLength = 10,
trControl = fitControl,
## parameters passed onto the ranger function
# the bigger the better.
num.trees = 700,
importance = "permutation")
fitControl <- trainControl(
## Repeated 5–fold CV
method = "repeatedcv",
number = 5,
## repeated 10 times
repeats = 10,
verboseIter = TRUE,
returnResamp = "all")
rrfFit <- train(drugscore ~ .,
data = training,
method = 'ranger',
# should be set high at least p/3
tuneLength = 10,
trControl = fitControl,
## parameters passed onto the ranger function
# the bigger the better.
num.trees = 700,
importance = "permutation")
library(caret)
library(magrittr)
library(plotly)
#library(readr)
#library(dplyr)
setwd("~/metabolomics")
# prepare data
load("CleanGeneMetab_NCI_60.Rdata")
z <- data.frame(rfClasses)
View(z)
testing$Gold_Price_USD
rfClasses <- predict(fit, newdata = testing)
z <- data.frame(rfClasses)
confusionMatrix(data = z, testing$Gold_Price_USD)
z
rfClasses
View(rfClasses)
View(testing$Gold_Price_USD)
rfClasses$Value
z
View(z)
View(z$rfClasses)
rfClasses <- predict(fit, newdata = testing)
z <- data.frame(rfClasses)
confusionMatrix(data = z$rfClasses, testing$Gold_Price_USD)
rfClasses <- predict(fit, newdata = testing)
z <- data.frame(rfClasses)
confusionMatrix(data = data.frame( z$rfClasses), data.frame( testing$Gold_Price_USD))
data.frame( z$rfClasses)
data.frame( testing$Gold_Price_USD)
rfClasses
set.seed(23)
inTraining <-
createDataPartition(
# atrybut do stratyfikacji
y = Sonar$Class,
# procent w zbiorze uczącym
p = .75,
# chcemy indeksy a nie listę
list = FALSE)
training <- Sonar[ inTraining,]
testing  <- Sonar[-inTraining,]
ctrl <- trainControl(
# powtórzona ocena krzyżowa
method = "repeatedcv",
# liczba podziałów
number = 2,
# liczba powtórzeń
repeats = 5)
set.seed(23)
fit <- train(Class ~ .,
data = training,
method = "rf",
trControl = ctrl,
# Paramter dla algorytmu uczącego
ntree = 10)
fit
rfClasses <- predict(fit, newdata = testing)
confusionMatrix(data = rfClasses, testing$Class)
rfClasses
View(rfClasses)
testing$Class
View(testing$Class)
reggresion_df <- df[-1]
inTraining  <- createDataPartition( y = reggresion_df$Gold_Price_USD, p=0.7, list=F)
training <- reggresion_df[ inTraining,]
testing  <- reggresion_df[-inTraining,]
d1 <- data.frame(price=reggresion_df[inTraining,]$Gold_Price_USD)
d2 <- data.frame(price=reggresion_df[-inTraining,]$Gold_Price_USD)
ggplot(mapping=aes(alpha=0.4)) +
geom_density(aes(price, fill="training"), d1) +
geom_density(aes(price, fill="testing"), d2) +
theme_minimal()
reggresion_df <- df[-1]
inTraining  <- createDataPartition( y = reggresion_df$Gold_Price_USD, p=0.7, list=F)
training <- reggresion_df[ inTraining,]
testing  <- reggresion_df[-inTraining,]
d1 <- data.frame(price=reggresion_df[inTraining,]$Gold_Price_USD)
d2 <- data.frame(price=reggresion_df[-inTraining,]$Gold_Price_USD)
ggplot(mapping=aes(alpha=0.4)) +
geom_density(aes(price, fill="training"), d1) +
geom_density(aes(price, fill="testing"), d2) +
theme_minimal()
reggresion_df <- df[-1]
inTraining  <- createDataPartition( y = reggresion_df$Gold_Price_USD, p=0.7, list=F)
training <- reggresion_df[ inTraining,]
testing  <- reggresion_df[-inTraining,]
d1 <- data.frame(price=reggresion_df[inTraining,]$Gold_Price_USD)
d2 <- data.frame(price=reggresion_df[-inTraining,]$Gold_Price_USD)
ggplot(mapping=aes(alpha=0.4)) +
geom_density(aes(price, fill="training"), d1) +
geom_density(aes(price, fill="testing"), d2) +
theme_minimal()
reggresion_df <- df[-1]
inTraining  <- createDataPartition( y = reggresion_df$Gold_Price_USD, p=0.7, list=F)
training <- reggresion_df[ inTraining,]
testing  <- reggresion_df[-inTraining,]
d1 <- data.frame(price=reggresion_df[inTraining,]$Gold_Price_USD)
d2 <- data.frame(price=reggresion_df[-inTraining,]$Gold_Price_USD)
ggplot(mapping=aes(alpha=0.4)) +
geom_density(aes(price, fill="training"), d1) +
geom_density(aes(price, fill="testing"), d2) +
theme_minimal()
reggresion_df <- df[-1]
inTraining  <- createDataPartition( y = reggresion_df$Gold_Price_USD, p=0.7, list=F)
training <- reggresion_df[ inTraining,]
testing  <- reggresion_df[-inTraining,]
d1 <- data.frame(price=reggresion_df[inTraining,]$Gold_Price_USD)
d2 <- data.frame(price=reggresion_df[-inTraining,]$Gold_Price_USD)
ggplot(mapping=aes(alpha=0.4)) +
geom_density(aes(price, fill="training"), d1) +
geom_density(aes(price, fill="testing"), d2) +
theme_minimal()
reggresion_df <- df[-1]
inTraining  <- createDataPartition( y = reggresion_df$Gold_Price_USD, p=0.7, list=F)
training <- reggresion_df[ inTraining,]
testing  <- reggresion_df[-inTraining,]
d1 <- data.frame(price=reggresion_df[inTraining,]$Gold_Price_USD)
d2 <- data.frame(price=reggresion_df[-inTraining,]$Gold_Price_USD)
ggplot(mapping=aes(alpha=0.4)) +
geom_density(aes(price, fill="training"), d1) +
geom_density(aes(price, fill="testing"), d2) +
theme_minimal()
reggresion_df <- df[-1]
inTraining  <- createDataPartition( y = reggresion_df$Gold_Price_USD, p=0.7, list=F)
training <- reggresion_df[ inTraining,]
testing  <- reggresion_df[-inTraining,]
d1 <- data.frame(price=reggresion_df[inTraining,]$Gold_Price_USD)
d2 <- data.frame(price=reggresion_df[-inTraining,]$Gold_Price_USD)
ggplot(mapping=aes(alpha=0.4)) +
geom_density(aes(price, fill="training"), d1) +
geom_density(aes(price, fill="testing"), d2) +
theme_minimal()
rfClasses <- predict(fit, newdata = testing)
set.seed(23)
ctrl <- trainControl(
# powtórzona ocena krzyżowa
method = "repeatedcv",
# liczba podziałów
number = 2,
# liczba powtórzeń
repeats = 5)
fit <- train(Gold_Price_USD ~ .,
data = training,
method = "rf",
trControl = ctrl,
# Paramter dla algorytmu uczącego
ntree = 30)
fit
rfClasses <- predict(fit, newdata = testing)
z <- data.frame(rfClasses)
confusionMatrix(data = data.frame( z$rfClasses), data.frame( testing$Gold_Price_USD))
rfClasses
plot(fit)
class(reClasses)
class(refClasses)
rfClasses <- predict(fit, newdata = testing)
z <- data.frame(rfClasses)
confusionMatrix(data = data.frame( z$rfClasses), data.frame( testing$Gold_Price_USD))
class(refClasses)
sapply(rfClasses, class)
View(rfClasses)
View(as.factor(rfClasses))
View(rfClasses)
View(rfClasses[3])
View(rfClasses[3,])
View(rfClasses)
rfClasses <- predict(fit, newdata = testing)
z <- data.frame(rfClasses)
confusionMatrix(data = as.factor(rfClasses), as.factor( testing$Gold_Price_USD))
as.factor(rfClasses)
class(rfClasses)
set.seed(23)
ctrl <- trainControl(
# powtórzona ocena krzyżowa
method = "repeatedcv",
# liczba podziałów
number = 5,
# liczba powtórzeń
repeats = 5)
fit <- train(Gold_Price_USD ~ .,
data = training,
method = "rf",
trControl = ctrl,
# Paramter dla algorytmu uczącego
ntree = 30)
fit
rfClasses <- predict(fit, newdata = testing)
z <- data.frame(rfClasses)
confusionMatrix(data = as.factor(rfClasses), as.factor( testing$Gold_Price_USD))
rfClasses <- predict(fit, newdata = testing)
confusionMatrix(data = rfClasses, testing$Gold_Price_USD)
set.seed(23)
ctrl <- trainControl(
# powtórzona ocena krzyżowa
method = "repeatedcv",
# liczba podziałów
number = 2,
# liczba powtórzeń
repeats = 5)
fit <- train(Gold_Price_USD ~ .,
data = training,
method = "rf",
trControl = ctrl,
# Paramter dla algorytmu uczącego
ntree = 30)
fit
Viw(train())
Viw(train
)
Viw(training)
View(training)
